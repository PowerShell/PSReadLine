# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneBranch template
name: PSReadLine-ModuleBuild-$(Build.BuildId)
trigger: none
pr: none

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  WindowsContainerImage: onebranch.azurecr.io/windows/ltsc2022/vse2022:latest

resources:
  repositories:
  - repository: onebranchTemplates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@onebranchTemplates
  parameters:
    featureFlags:
      WindowsHostVersion: '1ESWindows2022'
    globalSdl:
      disableLegacyManifest: true
      sbom:
        enabled: true
        packageName: PSReadLine
      codeql:
        compiled:
          enabled: true
      asyncSdl: # https://aka.ms/obpipelines/asyncsdl
        enabled: true
        forStages: [Build]
        credscan:
          enabled: true
          scanFolder:  $(Build.SourcesDirectory)\PSReadLine
        binskim:
          enabled: true
        apiscan:
          enabled: false

    stages:
    - stage: Build
      displayName: Build and Sign
      jobs:
      - job: build_windows
        displayName: Build PSReadLine
        variables:
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        - name: repoRoot
          value: $(Build.SourcesDirectory)\PSReadLine
        - name: ob_sdl_tsa_configFile
          value: $(repoRoot)\.config\tsaoptions.json
        - name: signSrcPath
          value: $(repoRoot)\bin\Release\PSReadLine
        - name: ob_sdl_sbom_enabled
          value: true
        - name: ob_signing_setup_enabled
          value: true
        #CodeQL tasks added manually to workaround signing failures
        - name: ob_sdl_codeql_compiled_enabled
          value: false

        pool:
          type: windows
        steps:
        - checkout: self
          env:
            # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
            ob_restore_phase: true

        - pwsh: |
            if (-not (Test-Path $(repoRoot)/.config/tsaoptions.json)) {
              throw "tsaoptions.json does not exist under $(repoRoot)/.config"
            }
          displayName: Test if tsaoptions.json exists
          env:
            # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
            ob_restore_phase: true

        - pwsh: |
            Write-Host "PS Version: $($($PSVersionTable.PSVersion))"
            Set-Location -Path '$(repoRoot)'
            .\build.ps1 -Bootstrap
          displayName: Bootstrap
          env:
            # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
            ob_restore_phase: true

        # Add CodeQL Init task right before your 'Build' step.
        - task: CodeQL3000Init@0
          env:
            # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
            ob_restore_phase: true
          inputs:
            Enabled: true
            AnalyzeInPipeline: true
            Language: csharp

        - pwsh: |
            function Send-VstsCommand ($vstsCommandString) {
              Write-Host ("sending: " + $vstsCommandString)
              Write-Host "##$vstsCommandString"
            }

            Write-Host "PS Version: $($($PSVersionTable.PSVersion))"
            Set-Location -Path '$(repoRoot)'
            .\build.ps1 -Configuration Release -Framework net461

            # Set target folder paths
            New-Item -Path .\bin\Release\NuGetPackage -ItemType Directory > $null
            Send-VstsCommand "vso[task.setvariable variable=NuGetPackage]$(Build.SourcesDirectory)\PSReadLine\bin\Release\NuGetPackage"
            Send-VstsCommand "vso[task.setvariable variable=PSReadLine]$(Build.SourcesDirectory)\PSReadLine\bin\Release\PSReadLine"
            Send-VstsCommand "vso[task.setvariable variable=Signed]$(Build.SourcesDirectory)\PSReadLine\bin\Release\Signed"
          displayName: Build
          env:
            # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
            ob_restore_phase: true

        # Add CodeQL Finalize task right after your 'Build' step.
        - task: CodeQL3000Finalize@0
          condition: always()
          env:
            # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
            ob_restore_phase: true

        - task: onebranch.pipeline.signing@1
          displayName: Sign 1st party files
          inputs:
            command: 'sign'
            signing_profile: external_distribution
            files_to_sign: '*.psd1;*.psm1;*.ps1;*.ps1xml;**\Microsoft*.dll;!Microsoft.PowerShell.Pager.dll'
            search_root: $(signSrcPath)

        - task: CopyFiles@2
          displayName: "Copy signed files to ob_outputDirectory - '$(ob_outputDirectory)'"
          inputs:
            SourceFolder: "$(signSrcPath)"
            Contents: '**'
            TargetFolder: $(ob_outputDirectory)

        - pwsh: |
            try {
              $RepoName = "PSRLLocal"
              Register-PSRepository -Name $RepoName -SourceLocation $(NuGetPackage) -PublishLocation $(NuGetPackage) -InstallationPolicy Trusted
              Publish-Module -Repository $RepoName -Path $(PSReadLine)
            } finally {
              Unregister-PSRepository -Name $RepoName -ErrorAction SilentlyContinue
            }
            Get-ChildItem -Path $(NuGetPackage)
          displayName: 'Create the NuGet package'
        - pwsh: |
            Get-ChildItem -Path $(PSReadLine), $(NuGetPackage)
            Write-Host "##vso[artifact.upload containerfolder=PSReadLine;artifactname=PSReadLine]$(PSReadLine)"
            Write-Host "##vso[artifact.upload containerfolder=NuGetPackage;artifactname=NuGetPackage]$(NuGetPackage)"
          displayName: 'Upload artifacts'
    - stage: compliance
      displayName: Compliance
      dependsOn: Build
      jobs:
      - job: Compliance_Job
        displayName: PSReadLine Compliance
        variables:
        - group: APIScan
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        timeoutInMinutes: 240
        pool:
          type: windows
        steps:
        - checkout: self
        - checkout: ComplianceRepo
        - download: current
          artifact: PSReadLine
        - pwsh: |
            Get-ChildItem -Path "$(Pipeline.Workspace)\PSReadLine" -Recurse
          displayName: Capture downloaded artifacts
        - pwsh: |
            function Send-VstsCommand ($vstsCommandString) {
              Write-Host ("sending: " + $vstsCommandString)
              Write-Host "##$vstsCommandString"
            }
            # Get module version
            $psd1Data = Import-PowerShellDataFile -Path "$(Pipeline.Workspace)\PSReadLine\PSReadLine.psd1"
            $moduleVersion = $psd1Data.ModuleVersion
            $prerelease = $psd1Data.PrivateData.PSData.Prerelease
            if ($prerelease) { $moduleVersion = "$moduleVersion-$prerelease" }
            Send-VstsCommand "vso[task.setvariable variable=ModuleVersion]$moduleVersion"
          displayName: Get Module Version
        - template: assembly-module-compliance.yml@ComplianceRepo
          parameters:
            AnalyzeTarget: '$(Pipeline.Workspace)\PSReadLine\*.dll'
            AnalyzeSymPath: 'SRV*'
            sourceScanPath: ''
            suppressionsFile: ''
            optionsRulesDBPath: ''
            optionsFTPath: ''
            codeBaseName: 'PSReadLine_201912'
            softwareFolder: '$(Pipeline.Workspace)\PSReadLine'
            softwareName: 'PSReadLine'
            softwareVersion: '$(ModuleVersion)'
            connectionString: 'RunAs=App;AppId=$(APIScanClient);TenantId=$(APIScanTenant);AppKey=$(APIScanSecret)'