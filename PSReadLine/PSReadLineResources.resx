<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptLineDescription" xml:space="preserve">
    <value>Accept the input or move to the next line if input is missing a closing token.</value>
  </data>
  <data name="AddLineDescription" xml:space="preserve">
    <value>Move the cursor to the next line without attempting to execute the input</value>
  </data>
  <data name="BackwardCharDescription" xml:space="preserve">
    <value>Move the cursor back one character</value>
  </data>
  <data name="BackwardDeleteCharDescription" xml:space="preserve">
    <value>Delete the charcter before the cursor</value>
  </data>
  <data name="BackwardDeleteLineDescription" xml:space="preserve">
    <value>Delete text from the cursor to the start of the line</value>
  </data>
  <data name="BackwardKillLineDescription" xml:space="preserve">
    <value>Move the text from the cursor to the beginning of the line to the kill ring</value>
  </data>
  <data name="BeginningOfHistoryDescription" xml:space="preserve">
    <value>Move to the first item in the history</value>
  </data>
  <data name="BeginningOfLineDescription" xml:space="preserve">
    <value>Move the cursor to the beginning of the line</value>
  </data>
  <data name="CancelLineDescription" xml:space="preserve">
    <value>Abort editing the current line and re-evaluate the prompt</value>
  </data>
  <data name="ClearKillRingDescription" xml:space="preserve">
    <value>Remove all items from the kill ring</value>
  </data>
  <data name="ClearyHistoryDescription" xml:space="preserve">
    <value>Remove all items from the command line history (not PowerShell history)</value>
  </data>
  <data name="CompleteDescription" xml:space="preserve">
    <value>Complete the input if there is a single completion, otherwise complete the input with common prefix for all completions.  Show possible completions if pressed a second time.</value>
  </data>
  <data name="DeleteCharDescription" xml:space="preserve">
    <value>Delete the character under the cusor</value>
  </data>
  <data name="ShellBackwardWordDescription" xml:space="preserve">
    <value>Move the cursor to the beginning of the current or previous token or start of the line</value>
  </data>
  <data name="EmacsCtrlXDescription" xml:space="preserve">
    <value>String is not used in the UI</value>
  </data>
  <data name="EmacsMetaDescription" xml:space="preserve">
    <value>String is not used in the UI</value>
  </data>
  <data name="EndOfHistoryDescription" xml:space="preserve">
    <value>Move to the last item (the current input) in the history</value>
  </data>
  <data name="EndOfLineDescription" xml:space="preserve">
    <value>Move the cursor to the end of the line</value>
  </data>
  <data name="ExchangePointAndMarkDescription" xml:space="preserve">
    <value>Mark the location of the cursor and move the cursor to the position of the previous mark</value>
  </data>
  <data name="ForwardCharDescription" xml:space="preserve">
    <value>Move the cursor forward one character</value>
  </data>
  <data name="ForwardDeleteLineDescription" xml:space="preserve">
    <value>Delete text from the cursor to the end of the line</value>
  </data>
  <data name="ShellForwardWordDescription" xml:space="preserve">
    <value>Move the cursor to the beginning of the next token or end of line</value>
  </data>
  <data name="HistorySearchBackwardDescription" xml:space="preserve">
    <value>Search for the previous item in the history that starts with the current input - like PreviousHistory if the input is empty</value>
  </data>
  <data name="HistorySearchForwardDescription" xml:space="preserve">
    <value>Search for the next item in the history that starts with the current input - like NextHistory if the input is empty</value>
  </data>
  <data name="IgnoreDescription" xml:space="preserve">
    <value>String is not used in the UI</value>
  </data>
  <data name="ShellBackwardKillWordDescription" xml:space="preserve">
    <value>Move the text from the cursor to the start of the current or previous token to the kill ring</value>
  </data>
  <data name="KillLineDescription" xml:space="preserve">
    <value>Move the text from the cursor to the end of the input to the kill ring</value>
  </data>
  <data name="ShellKillWordDescription" xml:space="preserve">
    <value>Move the text from the cursor to the end of the current or next token to the kill ring</value>
  </data>
  <data name="NextHistoryDescription" xml:space="preserve">
    <value>Replace the input with the next item in the history</value>
  </data>
  <data name="PasteDescription" xml:space="preserve">
    <value>Paste text from the system clipboard</value>
  </data>
  <data name="PossibleCompletionsDescription" xml:space="preserve">
    <value>Display the possible completions without changing the input</value>
  </data>
  <data name="PreviousHistoryDescription" xml:space="preserve">
    <value>Replace the input with the previous item in the history</value>
  </data>
  <data name="RedoDescription" xml:space="preserve">
    <value>Redo an undo</value>
  </data>
  <data name="RevertLineDescription" xml:space="preserve">
    <value>Equivalent to undo all edits (clears the line except lines imported from history)</value>
  </data>
  <data name="SetMarkDescription" xml:space="preserve">
    <value>Mark the location of the cursor</value>
  </data>
  <data name="TabCompleteNextDescription" xml:space="preserve">
    <value>Complete the input using the next completion</value>
  </data>
  <data name="TabCompletePreviousDescription" xml:space="preserve">
    <value>Complete the input using the previous completion</value>
  </data>
  <data name="UndoDescription" xml:space="preserve">
    <value>Undo a previous edit</value>
  </data>
  <data name="YankDescription" xml:space="preserve">
    <value>Copy the text from the current kill ring position to the input</value>
  </data>
  <data name="YankPopDescription" xml:space="preserve">
    <value>Replace the previously yanked text with the text from the next kill ring position</value>
  </data>
  <data name="StartOutOfRange" xml:space="preserve">
    <value>'start' cannot be less than zero or greater than the length of the buffer</value>
  </data>
  <data name="ReplacementLengthTooBig" xml:space="preserve">
    <value>length is too big</value>
  </data>
  <data name="DisplayAllPossibilities" xml:space="preserve">
    <value>Display all {0} possibilities? (y or n) _</value>
  </data>
  <data name="ClearScreenDescription" xml:space="preserve">
    <value>Clear the screen and redraw the current line at the top of the screen</value>
  </data>
  <data name="GotoBraceDescription" xml:space="preserve">
    <value>Go to matching brace</value>
  </data>
  <data name="AbortDescription" xml:space="preserve">
    <value>Abort the current operation, e.g. incremental history search</value>
  </data>
  <data name="ForwardSearchHistoryDescription" xml:space="preserve">
    <value>Search history forward interactively</value>
  </data>
  <data name="ReverseSearchHistoryDescription" xml:space="preserve">
    <value>Search history backwards interactively</value>
  </data>
  <data name="BackwardKillWordDescription" xml:space="preserve">
    <value>Move the text from the start of the current or previous word to the cursor to the kill ring</value>
  </data>
  <data name="BackwardWordDescription" xml:space="preserve">
    <value>Move the cursor to the beginning of the current or previous word</value>
  </data>
  <data name="ForwardWordDescription" xml:space="preserve">
    <value>Move the cursor forward to the end of the current word, or if between words, to the end of the next word. </value>
  </data>
  <data name="KillWordDescription" xml:space="preserve">
    <value>Move the text from the cursor to the end of the current or next word to the kill ring</value>
  </data>
  <data name="NextWordDescription" xml:space="preserve">
    <value>Move the cursor forward to the start of the next word</value>
  </data>
  <data name="UnixWordRuboutDescription" xml:space="preserve">
    <value>Move the text from the cursor to the start of the current or previous whitespace delimited word to the kill ring</value>
  </data>
  <data name="CharacterSearchBackwardDescription" xml:space="preserve">
    <value>Read a character and move the cursor to the previous occurence of that character</value>
  </data>
  <data name="CharacterSearchDescription" xml:space="preserve">
    <value>Read a character and move the cursor to the next occurence of that character</value>
  </data>
  <data name="DigitArgumentDescription" xml:space="preserve">
    <value>Start or accumulate a numeric argument to other functions</value>
  </data>
  <data name="YankLastArgDescription" xml:space="preserve">
    <value>Copy the text of the last argument to the input</value>
  </data>
  <data name="YankNthArgDescription" xml:space="preserve">
    <value>Copy the text of the first argument to the input</value>
  </data>
  <data name="AcceptAndGetNextDescription" xml:space="preserve">
    <value>Accept the current line and recall the next line from history after the current line finishes executing</value>
  </data>
  <data name="DisableDemoModeDescription" xml:space="preserve">
    <value>Disable demo mode</value>
  </data>
  <data name="EnableDemoModeDescription" xml:space="preserve">
    <value>Displays a window below the input line that shows which keys are typed</value>
  </data>
  <data name="KeyIsUnbound" xml:space="preserve">
    <value>Key is unbound</value>
  </data>
  <data name="SelfInsertDescription" xml:space="preserve">
    <value>Insert the key typed</value>
  </data>
  <data name="ShowKeyBindingsDescription" xml:space="preserve">
    <value>Show all key bindings</value>
  </data>
  <data name="WhatIsKeyDescription" xml:space="preserve">
    <value>Show the key binding for the next chord entered</value>
  </data>
  <data name="CopyDescription" xml:space="preserve">
    <value>Copy selected region to the system clipboard.  If no region is selected, copy the whole line</value>
  </data>
  <data name="CutDescription" xml:space="preserve">
    <value>Delete selected region placing deleted text in the system clipboard</value>
  </data>
  <data name="KillRegionDescription" xml:space="preserve">
    <value>Kill the text between the cursor and the mark</value>
  </data>
  <data name="SelectBackwardCharDescription" xml:space="preserve">
    <value>Adjust the current selection to include the previous character</value>
  </data>
  <data name="SelectBackwardWordDescription" xml:space="preserve">
    <value>Adjust the current selection to include the previous word</value>
  </data>
  <data name="SelectForwardCharDescription" xml:space="preserve">
    <value>Adjust the current selection to include the next character</value>
  </data>
  <data name="SelectForwardWordDescription" xml:space="preserve">
    <value>Adjust the current selection to include the next word using ForwardWord</value>
  </data>
  <data name="SelectNextWordDescription" xml:space="preserve">
    <value>Adjust the current selection to include the next word</value>
  </data>
  <data name="SelectShellBackwardWordDescription" xml:space="preserve">
    <value>Adjust the current selection to include the previous word using ShellBackwardWord</value>
  </data>
  <data name="SelectShellForwardWordDescription" xml:space="preserve">
    <value>Adjust the current selection to include the next word using ShellForwardWord</value>
  </data>
  <data name="CaptureScreenDescription" xml:space="preserve">
    <value>Copy selected lines to the clipboard</value>
  </data>
  <data name="InvokePromptDescription" xml:space="preserve">
    <value>Erases the current prompt and calls the prompt function to redisplay the prompt</value>
  </data>
  <data name="ScrollDisplayDownDescription" xml:space="preserve">
    <value>Scroll the display down one screen</value>
  </data>
  <data name="ScrollDisplayToCursorDescription" xml:space="preserve">
    <value>Scroll the display to the cursor</value>
  </data>
  <data name="ScrollDisplayTopDescription" xml:space="preserve">
    <value>Scroll the display to the top</value>
  </data>
  <data name="ScrollDisplayUpDescription" xml:space="preserve">
    <value>Scroll the display up one screen</value>
  </data>
  <data name="SelectShellNextWordDescription" xml:space="preserve">
    <value>Adjust the current selection to include the next word using ShellNextWord</value>
  </data>
  <data name="ShellNextWordDescription" xml:space="preserve">
    <value>Move the cursor to the end of the current token</value>
  </data>
  <data name="SelectBackwardsLineDescription" xml:space="preserve">
    <value>Adjust the current selection to include from the cursor to the end of the line</value>
  </data>
  <data name="SelectLineDescription" xml:space="preserve">
    <value>Adjust the current selection to include from the cursor to the start of the line</value>
  </data>
  <data name="SelectAllDescription" xml:space="preserve">
    <value>Select the entire line. Moves the cursor to the end of the line</value>
  </data>
  <data name="CopyOrCancelLineDescription" xml:space="preserve">
    <value>Either copy selected text to the clipboard, or if no text is selected, cancel editing the line with CancelLine.</value>
  </data>
  <data name="MenuCompleteDescription" xml:space="preserve">
    <value>Complete the input if there is a single completion, otherwise complete the input by selecting from a menu of possible completions.</value>
  </data>
</root>